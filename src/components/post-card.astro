---
import type { Article } from "@/utils/types";
import Date from "@/components/date";
import ToolBadge from "@/components/tool-badge";
import { domain, personalInfo } from "@/utils/information";

interface Props {
  article: Article;
}

const { article }: Props = Astro.props;
const { title, description, date, tools, category, image } = article.data;

const postLD = JSON.stringify({
  "@context": "https://schema.org",
  "@type": "Article",
  headline: title,
  articleSection: category,
  description: description,
  dateCreated: "2024-12-1T12:34:00-05:00",
  image: [],
  dateModified: "2024-12-1T14:53:00-05:00",
  author: {
    "@type": "Person",
    name: personalInfo.name,
    url: `${domain}/`,
  },
  url: `${domain}/posts/${article.id}`,
  ...(tools?.length
    ? {
        keywords: tools.join(", "),
      }
    : {}),
});
---

<script type="application/ld+json" set:html={postLD} />
<article class="article">
  <a
    aria-label={`Read article: ${title}`}
    title={title}
    href={`/posts/${article.id}`}
    class="article-link"
  >
    <div class="article-container">
      <header class="article-header">
        <h2 class="article-title">{title}</h2>

        <Date class="article-date" date={date} />
      </header>

      <div class="article-content">
        <p class="article-description">{description}</p>

        {
          tools && tools.length > 0 && (
            <div class="article-tool-list">
              {tools.map((tool: string) => (
                <ToolBadge tool={tool} mr="0.25" />
              ))}
            </div>
          )
        }
      </div>
    </div>
  </a>
</article>

<style>
  .article {
    display: flex;
    height: 100%;
    border: var(--border);
    border-radius: 0.5rem;
    overflow: hidden;
    padding: 1rem;
    transition: border-color 0.2s ease;
  }

  .article-link {
    text-decoration: none;
  }

  .article-container {
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  .article-header {
    color: var(--foreground);
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 1rem;
  }

  @media (min-width: 640px) {
    .article-header {
      flex-direction: row;
      justify-content: space-between;
      align-items: flex-start;
    }
  }

  .article-date {
    display: flex;
    align-items: center;
    text-align: end;
    min-width: 3rem;
  }

  .article-title {
    font-size: 1.125rem;
    opacity: 0.8;
    font-weight: 600;
    line-height: 1.3;
    margin: 0;
    transition: color 0.2s ease;
  }

  .article-content {
    display: flex;
    flex-direction: column;
    flex: 1 1 auto;
    justify-content: space-between;
  }

  .article-description {
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
    line-height: 1.6;
    color: var(--secondary-foreground);
  }

  .article-tool-list {
    display: flex;
  }

  .article:hover {
    border-color: var(--border-hovered);
  }

  .article:hover .article-title {
    opacity: 1;
  }
</style>
